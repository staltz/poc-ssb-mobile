diff --git a/node_modules/scuttlebot/lib/apidocs.js b/node_modules/scuttlebot/lib/apidocs.js
index 9f628c6..6c4d233 100644
--- a/node_modules/scuttlebot/lib/apidocs.js
+++ b/node_modules/scuttlebot/lib/apidocs.js
@@ -1,13 +1,760 @@
 var fs = require('fs')
 var path = require('path')
 module.exports = {
-  _: fs.readFileSync(path.join(__dirname, '../api.md'), 'utf-8'),
+  _: `# scuttlebot
+
+Secure-scuttlebutt API server
+
+
+
+## get: async
+
+Get a message by its hash-id.
+
+bash
+get {msgid}
+
+
+js
+get(msgid, cb)
+
+
+
+
+## createFeedStream: source
+
+(feed) Fetch messages ordered by their claimed timestamps.
+
+bash
+feed [--live] [--gt index] [--gte index] [--lt index] [--lte index] [--reverse]  [--keys] [--values] [--limit n]
+
+
+js
+createFeedStream({ live:, gt:, gte:, lt:, lte:, reverse:, keys:, values:, limit:, fillCache:, keyEncoding:, valueEncoding: })
+
+
+Create a stream of the data in the database, ordered by the timestamp claimed by the author.
+NOTE - the timestamp is not verified, and may be incorrect.
+The range queries (gt, gte, lt, lte) filter against this claimed timestap.
+
+ - "live" (boolean, default: "false"): Keep the stream open and emit new messages as they are received.
+ - "gt" (greater than), "gte" (greater than or equal) define the lower bound of the range to be streamed. Only records where the key is greater than (or equal to) this option will be included in the range. When "reverse=true" the order will be reversed, but the records streamed will be the same.
+ - "lt" (less than), "lte" (less than or equal) define the higher bound of the range to be streamed. Only key/value pairs where the key is less than (or equal to) this option will be included in the range. When "reverse=true" the order will be reversed, but the records streamed will be the same.
+ - "reverse" (boolean, default: "false"): a boolean, set true and the stream output will be reversed. Beware that due to the way LevelDB works, a reverse seek will be slower than a forward seek.
+ - "keys" (boolean, default: "true"): whether the "data" event should contain keys. If set to "true" and "values" set to "false" then "data" events will simply be keys, rather than objects with a "key" property.
+ - "values" (boolean, default: "true"): whether the "data" event should contain values. If set to "true" and "keys" set to "false" then "data" events will simply be values, rather than objects with a "value" property.
+ - "limit" (number, default: "-1"): limit the number of results collected by this stream. This number represents a *maximum* number of results and may not be reached if you get to the end of the data first. A value of "-1" means there is no limit. When "reverse=true" the highest keys will be returned instead of the lowest keys.
+ - "fillCache" (boolean, default: "false"): wheather LevelDB's LRU-cache should be filled with data read.
+ - "keyEncoding" / "valueEncoding" (string): the encoding applied to each read piece of data.
+
+
+
+## createLogStream: source
+
+(log) Fetch messages ordered by the time received.
+
+bash
+log [--live] [--gt index] [--gte index] [--lt index] [--lte index] [--reverse]  [--keys] [--values] [--limit n]
+
+
+js
+createLogStream({ live:, gt:, gte:, lt:, lte:, reverse:, keys:, values:, limit:, fillCache:, keyEncoding:, valueEncoding: })
+
+
+Creates a stream of the messages that have been written to this instance, in the order they arrived.
+The objects in this stream will be of the form:
+
+
+{ key: Hash, value: Message, timestamp: timestamp }
+
+
+"timestamp" is the time which the message was received.
+It is generated by [monotonic-timestamp](https://github.com/dominictarr/monotonic-timestamp).
+The range queries (gt, gte, lt, lte) filter against this receive timestap.
+
+
+ - "live" (boolean, default: "false"): Keep the stream open and emit new messages as they are received.
+ - "gt" (greater than), "gte" (greater than or equal) define the lower bound of the range to be streamed. Only records where the key is greater than (or equal to) this option will be included in the range. When "reverse=true" the order will be reversed, but the records streamed will be the same.
+ - "lt" (less than), "lte" (less than or equal) define the higher bound of the range to be streamed. Only key/value pairs where the key is less than (or equal to) this option will be included in the range. When "reverse=true" the order will be reversed, but the records streamed will be the same.
+ - "reverse" (boolean, default: "false"): a boolean, set true and the stream output will be reversed. Beware that due to the way LevelDB works, a reverse seek will be slower than a forward seek.
+ - "keys" (boolean, default: "true"): whether the "data" event should contain keys. If set to "true" and "values" set to "false" then "data" events will simply be keys, rather than objects with a "key" property.
+ - "values" (boolean, default: "false"): whether the "data" event should contain values. If set to "true" and "keys" set to "false" then "data" events will simply be values, rather than objects with a "value" property.
+ - "limit" (number, default: "-1"): limit the number of results collected by this stream. This number represents a *maximum* number of results and may not be reached if you get to the end of the data first. A value of "-1" means there is no limit. When "reverse=true" the highest keys will be returned instead of the lowest keys.
+ - "fillCache" (boolean, default: "false"): wheather LevelDB's LRU-cache should be filled with data read.
+ - "keyEncoding" / "valueEncoding" (string): the encoding applied to each read piece of data.
+
+
+
+## messagesByType: source
+
+(logt) Retrieve messages with a given type, ordered by receive-time.
+
+
+bash
+logt --type {type} [--live] [--gt index] [--gte index] [--lt index] [--lte index] [--reverse]  [--keys] [--values] [--limit n]
+
+
+js
+messagesByType({ type:, live:, gt:, gte:, lt:, lte:, reverse:, keys:, values:, limit:, fillCache:, keyEncoding:, valueEncoding: })
+
+
+All messages must have a type, so this is a good way to select messages that an application might use.
+Like in createLogStream, the range queries (gt, gte, lt, lte) filter against the receive timestap.
+
+ - "type" (string): The type of the messages to emit.
+ - "live" (boolean, default: "false"): Keep the stream open and emit new messages as they are received.
+ - "gt" (greater than), "gte" (greater than or equal) define the lower bound of the range to be streamed. Only records where the key is greater than (or equal to) this option will be included in the range. When "reverse=true" the order will be reversed, but the records streamed will be the same.
+ - "lt" (less than), "lte" (less than or equal) define the higher bound of the range to be streamed. Only key/value pairs where the key is less than (or equal to) this option will be included in the range. When "reverse=true" the order will be reversed, but the records streamed will be the same.
+ - "reverse" (boolean, default: "false"): a boolean, set true and the stream output will be reversed. Beware that due to the way LevelDB works, a reverse seek will be slower than a forward seek.
+ - "keys" (boolean, default: "true"): whether the "data" event should contain keys. If set to "true" and "values" set to "false" then "data" events will simply be keys, rather than objects with a "key" property.
+ - "values" (boolean, default: "true"): whether the "data" event should contain values. If set to "true" and "keys" set to "false" then "data" events will simply be values, rather than objects with a "value" property.
+ - "limit" (number, default: "-1"): limit the number of results collected by this stream. This number represents a *maximum* number of results and may not be reached if you get to the end of the data first. A value of "-1" means there is no limit. When "reverse=true" the highest keys will be returned instead of the lowest keys.
+ - "fillCache" (boolean, default: "false"): wheather LevelDB's LRU-cache should be filled with data read.
+ - "keyEncoding" / "valueEncoding" (string): the encoding applied to each read piece of data.
+
+
+
+## createHistoryStream: source
+
+(hist) Fetch messages from a specific user, ordered by sequence numbers.
+
+bash
+hist {feedid} [seq] [live]
+hist --id {feedid} [--seq n] [--live] [--limit n] [--keys] [--values]
+
+
+js
+createHistoryStream(id, seq, live)
+createHistoryStream({ id:, seq:, live:, limit:, keys:, values: })
+
+
+"createHistoryStream" and "createUserStream" serve the same purpose.
+"createHistoryStream" exists as a separate call because it provides fewer range parameters, which makes it safer for RPC between untrusted peers.
+
+ - "id" (FeedID, required): The id of the feed to fetch.
+ - "seq" (number, default: "0"): If "seq > 0", then only stream messages with sequence numbers greater than "seq".
+ - "live" (boolean, default: "false"): Keep the stream open and emit new messages as they are received.
+ - "keys" (boolean, default: "true"): whether the "data" event should contain keys. If set to "true" and "values" set to "false" then "data" events will simply be keys, rather than objects with a "key" property.
+ - "values" (boolean, default: "true"): whether the "data" event should contain values. If set to "true" and "keys" set to "false" then "data" events will simply be values, rather than objects with a "value" property.
+ - "limit" (number, default: "-1"): limit the number of results collected by this stream. This number represents a *maximum* number of results and may not be reached if you get to the end of the data first. A value of "-1" means there is no limit. When "reverse=true" the highest keys will be returned instead of the lowest keys.
+
+
+## createUserStream: source
+
+Fetch messages from a specific user, ordered by sequence numbers.
+
+bash
+createUserStream --id {feedid} [--live] [--gt index] [--gte index] [--lt index] [--lte index] [--reverse]  [--keys] [--values] [--limit n]
+
+
+js
+createUserStream({ id:, live:, gt:, gte:, lt:, lte:, reverse:, keys:, values:, limit:, fillCache:, keyEncoding:, valueEncoding: })
+
+
+"createHistoryStream" and "createUserStream" serve the same purpose.
+"createHistoryStream" exists as a separate call because it provides fewer range parameters, which makes it safer for RPC between untrusted peers.
+
+The range queries (gt, gte, lt, lte) filter against the sequence number.
+
+ - "id" (FeedID, required): The id of the feed to fetch.
+ - "live" (boolean, default: "false"): Keep the stream open and emit new messages as they are received.
+ - "gt" (greater than), "gte" (greater than or equal) define the lower bound of the range to be streamed. Only records where the key is greater than (or equal to) this option will be included in the range. When "reverse=true" the order will be reversed, but the records streamed will be the same.
+ - "lt" (less than), "lte" (less than or equal) define the higher bound of the range to be streamed. Only key/value pairs where the key is less than (or equal to) this option will be included in the range. When "reverse=true" the order will be reversed, but the records streamed will be the same.
+ - "reverse" (boolean, default: "false"): a boolean, set true and the stream output will be reversed. Beware that due to the way LevelDB works, a reverse seek will be slower than a forward seek.
+ - "keys" (boolean, default: "true"): whether the "data" event should contain keys. If set to "true" and "values" set to "false" then "data" events will simply be keys, rather than objects with a "key" property.
+ - "values" (boolean, default: "true"): whether the "data" event should contain values. If set to "true" and "keys" set to "false" then "data" events will simply be values, rather than objects with a "value" property.
+ - "limit" (number, default: "-1"): limit the number of results collected by this stream. This number represents a *maximum* number of results and may not be reached if you get to the end of the data first. A value of "-1" means there is no limit. When "reverse=true" the highest keys will be returned instead of the lowest keys.
+ - "fillCache" (boolean, default: "false"): wheather LevelDB's LRU-cache should be filled with data read.
+ - "keyEncoding" / "valueEncoding" (string): the encoding applied to each read piece of data.
+
+
+
+## links: source
+
+Get a stream of messages, feeds, or blobs that are linked to/from an id.
+
+bash
+links [--source id|filter] [--dest id|filter] [--rel value] [--keys] [--values] [--live] [--reverse]
+
+
+js
+links({ source:, dest:, rel:, keys:, values:, live:, reverse: })
+
+
+The objects in this stream will be of the form:
+
+
+{ source: ID, rel: String, dest: ID, key: MsgID }
+
+
+ - "source" (string, optional): An id or filter, specifying where the link should originate from. To filter, just use the sigil of the type you want: "@" for feeds, "%" for messages, and "&" for blobs.
+ - "dest" (string, optional): An id or filter, specifying where the link should point to. To filter, just use the sigil of the type you want: "@" for feeds, "%" for messages, and "&" for blobs.
+ - "rel" (string, optional): Filters the links by the relation string.
+ - "live" (boolean, default: "false"): Keep the stream open and emit new messages as they are received.
+ - "reverse" (boolean, default: "false"): a boolean, set true and the stream output will be reversed. Beware that due to the way LevelDB works, a reverse seek will be slower than a forward seek.
+ - "keys" (boolean, default: "true"): whether the "data" event should contain keys. If set to "true" and "values" set to "false" then "data" events will simply be keys, rather than objects with a "key" property.
+ - "values" (boolean, default: "true"): whether the "data" event should contain values. If set to "true" and "keys" set to "false" then "data" events will simply be values, rather than objects with a "value" property.
+
+
+
+## relatedMessages: async
+
+Retrieve the tree of messages related to the given id.
+
+bash
+relatedMessages --id {msgid} [--rel value] [--count] [--parent]
+
+
+js
+relatedMessages ({ id:, rel:, count:, parent: }, cb)
+
+
+This is ideal for collecting things like threaded replies.
+The output is a recursive structure like this:
+
+ js
+{
+  key: <id>,
+  value: <msg>,
+  related: [
+    <recursive>,...
+  ],
+  //number of messages below this point. (when opts.count = true)
+  count: <int>,
+  //the message this message links to. this will not appear on the bottom level.
+  //(when opts.parent = true)
+  parent: <parent_id>
+}
+
+
+ - "id" (MsgID): Root message, fetches messages related message to its ID.
+ - "rel" (string, optional): Filters the links by the relation string.
+ - "count" (boolean, default: "false"): Include a "count" of each message's decendant messages.
+ - "parent" (boolean, default: "false"): Include the "parent" id of each message.
+
+
+
+## add: async
+
+Add a well-formed message to the database.
+
+bash
+cat ./message.json | add
+add --author {feedid} --sequence {number} --previous {msgid} --timestamp {number} --hash sha256 --signature {sig} --content.type {type} --content.{...}
+
+
+js
+add({ author:, sequence:, previous: timestamp:, hash: 'sha256', signature:, content: { type:, ... } }, cb)
+
+
+ - "author" (FeedID): Public key of the author of the message.
+ - "sequence" (number): Sequence number of the message. (Starts from 1.)
+ - "previous" (MsgID): Hash-id of the previous message in the feed (null for seq=1).
+ - "timestamp" (number): Unix timestamp for the publish time.
+ - "hash" (string): The hash algorithm used in the message, should always be "sha256".
+ - "signature" (string): A signature computed using the author pubkey and the content of the message (less the "signature" attribute).
+ - "content" (object): The content of the message.
+   - ".type" (string): The object's type.
+
+
+## publish: async
+
+Construct a message using sbot's current user, and add it to the DB.
+
+bash
+cat ./message-content.json | publish
+publish --type {string} [--other-attributes...]
+
+
+js
+publish({ type:, ... }, cb)
+
+
+This is the recommended method for publishing new messages, as it handles the tasks of correctly setting the message's timestamp, sequence number, previous-hash, and signature.
+
+ - "content" (object): The content of the message.
+   - ".type" (string): The object's type.
+
+
+
+
+## getAddress: sync
+
+Get the address of the server.
+
+bash
+getAddress
+
+
+js
+getAddress(cb)
+
+
+
+
+## getLatest: async
+
+Get the latest message in the database by the given feedid.
+
+bash
+getLatest {feedid}
+
+
+js
+getLatest(id, cb)
+
+
+
+
+## latest: source
+
+Get the seq numbers of the latest messages of all users in the database.
+
+bash
+latest
+
+
+js
+latest()
+
+
+
+
+## latestSequence: async
+
+Get the sequence and local timestamp of the last received message from
+a given "feedId".
+
+bash
+latestSequence {feedId}
+
+
+js
+latest({feedId})
+
+
+
+
+## whoami: sync
+
+Get information about the current sbot user.
+
+bash
+whoami
+
+
+js
+whoami(cb)
+
+
+Outputs information in the following form:
+
+
+{ id: FeedID }
+
+
+
+
+`,
 //  blobs: fs.readFileSync(path.join(__dirname, '../plugins/blobs.md'), 'utf-8'),
-  block: fs.readFileSync(path.join(__dirname, '../plugins/block.md'), 'utf-8'),
-  friends: fs.readFileSync(path.join(__dirname, '../plugins/friends.md'), 'utf-8'),
-  gossip: fs.readFileSync(path.join(__dirname, '../plugins/gossip.md'), 'utf-8'),
-  invite: fs.readFileSync(path.join(__dirname, '../plugins/invite.md'), 'utf-8'),
-  plugins: fs.readFileSync(path.join(__dirname, '../plugins/plugins.md'), 'utf-8'),
-  'private': fs.readFileSync(path.join(__dirname, '../plugins/private.md'), 'utf-8'),
-  replicate: fs.readFileSync(path.join(__dirname, '../plugins/replicate.md'), 'utf-8')
+  block: `# scuttlebot block plugin
+
+Disallow connections with people flagged by the local user, and avoid sending a feed to the users they've flag.
+
+
+## isBlocked: sync
+
+Is the target user blocked?
+
+bash
+isBlocked {dest}
+isBlocked --source {feedid} --dest {feedid}
+
+
+js
+isBlocked(dest, cb)
+isBlocked({ source:, dest: }, cb)
+
+
+If "source" is not specified, defaults to the local user.`,
+  friends: `# scuttlebot friends plugin
+
+Query the follow and flag graphs.
+
+
+## all: async
+
+Fetch the graph structure.
+
+bash
+all [graph]
+
+
+js
+all(graph, cb)
+
+
+ - "graph" (string, default: "follow"): Which graph to view. May be "follow" or "flag".
+
+
+
+## hops: async
+
+List the degrees-of-connection of all known feeds from the given feed.
+
+bash
+hops [start] [graph] [--dunbar number] [--hops number]
+
+
+js
+hops(start, graph, { dunbar:, hops: }, cb)
+
+
+ - "start" (FeedID, default: local user): Which feed to start from.
+ - "graph" (string, default: "follow"): Which graph to view. May be "follow" or "flag".
+ - "dunbar" (number, default: 150): Limit on how many feeds to include in the list.
+ - "hops" (number, default: 3): Limit on how many hops out the feed needs to be, to be included.
+
+
+
+## createFriendStream: source
+
+Live-stream the ids of feeds which meet the given hops query. If "meta"
+option is set, then will return steam of "{id, hops}"
+
+bash
+createFriendStream [--start feedid] [--graph follow|flag] [--dunbar number] [--hops number] [--meta]
+
+
+js
+createFriendStream({ start:, graph:, dunbar:, hops: , meta: }, cb)
+
+
+ - "start" (FeedID, default: local user): Which feed to start from.
+ - "graph" (string, default: "follow"): Which graph to view. May be "follow" or "flag".
+ - "dunbar" (number, default: 150): Limit on how many feeds to include in the list.
+ - "hops" (number, default: 3): Limit on how many hops out the feed needs to be, to be included.
+
+
+
+## get: sync
+
+Get the edge between two different feeds.
+
+bash
+get --source {feedid} --dest {feedid} [--graph follow|flag]
+
+
+js
+get({ source:, dest:, graph: }, cb)
+
+
+ - "source" (FeedID): Edge source.
+ - "dest" (FeedID): Edge destination.
+ - "graph" (string, default: "follow"): Which graph to query. May be "follow" or "flag".
+`,
+  gossip: `# scuttlebot gossip plugin
+
+Schedule connections randomly with a peerlist constructed from config, multicast UDP announcements, feed announcements, and API-calls.
+
+
+
+## peers: sync
+
+Get the current peerlist.
+
+bash
+peers
+
+
+js
+peers(cb)
+
+
+
+
+## add: sync
+
+Add an address to the peer table.
+
+bash
+add {addr}
+add --host {string} --port {number} --key {feedid}
+
+
+js
+add(addr, cb)
+add({ host:, port:, key: }, cb)
+
+
+ - "addr" (address string): An address string, of the following format: "hostname:port:feedid".
+ - "host" (host string): IP address or hostname.
+ - "port" (port number)
+ - "key" (feedid)
+
+## remove: sync
+
+Remove an address from the peer table.
+
+bash
+remove {addr}
+remove --host {string} --port {number} --key {feedid}
+
+
+js
+remove(addr)
+remove({ host:, port:, key: })
+
+
+## ping: duplex
+
+used internally by the gossip plugin to measure latency and clock skew
+
+## connect: async
+
+Add an address to the peer table, and connect immediately.
+
+bash
+connect {addr}
+connect --host {string} --port {number} --key {feedid}
+
+
+js
+connect(addr, cb)
+connect({ host:, port:, key: }, cb)
+
+
+ - "addr" (address string): An address string, of the following format: "hostname:port:feedid".
+ - "host" (host string): IP address or hostname.
+ - "port" (port number)
+ - "key" (feedid)
+
+
+## changes: source
+
+Listen for gossip events.
+
+bash
+changes
+
+
+js
+changes()
+
+
+Events come in the following forms:
+
+
+{ type: 'discover', peer:, source: }
+{ type: 'connect', peer: }
+{ type: 'connect-failure', peer: }
+{ type: 'disconnect', peer: }
+
+
+## reconnect: sync
+
+Tell sbot to reinitiate gossip connections now.
+
+
+`,
+  invite: `# scuttlebot invite plugin
+
+Invite-token system, mainly used for pubs.
+
+
+## create: async
+
+Create a new invite code.
+
+bash
+create {n} [{note}]
+
+
+js
+create(n[, note], cb)
+
+
+This produces an invite-code which encodes the sbot server's address, and a keypair seed.
+The keypair seed is used to generate a keypair, which is then used to authenticate a connection with the sbot server.
+The sbot server will then grant access to the "use" call.
+
+- "n" (number): How many times the invite can be used before it expires.
+- "note" (string): A note to associate with the invite code. The sbot server will
+    include this note in the follow message that it creates when "use" is
+    called.
+
+
+
+## accept: async
+
+Use an invite code.
+
+bash
+accept {invitecode}
+
+
+js
+accept(invitecode, cb)
+
+
+This connects to the server address encoded in the invite-code, then calls "use()" on the server.
+It will cause the server to follow the local user.
+
+ - invitecode (string)
+
+
+## use: async
+
+Use an invite code created by this sbot instance (advanced function).
+
+bash
+use --feed {feedid}
+
+
+js
+use({ feed: }, cb)
+
+
+This commands the receiving server to follow the given feed.
+
+An invite-code encodes the sbot server's address, and a keypair seed.
+The keypair seed must be used to generate a keypair, then authenticate a connection with the sbot server, in order to use this function.
+
+ - "feed" (feedid): The feed the server should follow.
+
+`,
+  plugins: `# scuttlebot plugins plugin
+
+Install and manage third-party plugins.
+
+
+
+## install: source
+
+Install a plugin to Scuttlebot.
+
+bash
+install {nodeModule} [--from path]
+
+js
+install(nodeModule, { from: })
+
+
+Calls out to npm to install a package into "~/.ssb/node_modules".
+
+ - nodeModule (string): The name of the plugin to install. Uses npm's module package-name rules.
+ - from (string): A location to install from (directory path, url, or any location that npm accepts for its install command).
+
+
+
+## uninstall: source
+
+Uninstall a plugin from Scuttlebot.
+
+bash
+uninstall {nodeModule}
+
+js
+uninstall(nodeModule)
+
+
+Calls out to npm to uninstall a package into "~/.ssb/node_modules".
+
+ - nodeModule (string): The name of the plugin to uninstall.
+
+
+
+## enable: async
+
+Update the config to enable a plugin.
+
+bash
+enable {nodeModule}
+
+js
+enable(nodeModule, cb)
+
+
+ - nodeModule (string): The name of the plugin to enable.
+
+
+
+## disable: async
+
+Update the config to disable a plugin.
+
+bash
+disable {nodeModule}
+
+js
+disable(nodeModule, cb)
+
+
+ - nodeModule (string): The name of the plugin to disable.`,
+  'private': `# scuttlebot private plugin
+
+Methods to publish and decrypt secret messages.
+
+
+
+## publish: async
+
+Publish an encrypted message.
+
+bash
+*this can not be used from the commandline*
+
+
+js
+publish(content, recps, cb)
+
+
+The content will be encrypted using the public keys passed into recps.
+Limit 7 recipients.
+
+ - "content" (object): The content of the message.
+ - "recps" (array of feedids): The recipients of the message (limit 7).
+
+
+## unbox: sync
+
+Attempt to decrypt the content of an encrypted message.
+
+
+*this can not be used from the commandline*
+
+
+js
+unbox(ciphertext, cb)
+
+
+ - "cyphertext" (string)`,
+  replicate: `# scuttlebot replicate plugin
+
+Sync feeds between peers.
+
+
+## changes: source
+
+Listen to replicate events.
+
+bash
+changes
+
+
+js
+changes()
+
+
+Emits events of the following form:
+
+
+{ type: 'progress', peerid:, total:, progress:, feeds:, sync: }
+
+
+## upto: source
+
+returns {} of feeds to replicate, with sequences
+
+`
 }
